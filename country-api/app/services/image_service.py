from PIL import Image, ImageDraw, ImageFont
from typing import List, Dict
from datetime import datetime
import os

from app.models.country import Country


class ImageService:
    """Service for generating summary images"""
    
    def __init__(self):
        self.cache_dir = "cache"
        self.image_path = os.path.join(self.cache_dir, "summary.png")
        
        # Ensure cache directory exists
        os.makedirs(self.cache_dir, exist_ok=True)
    
    def generate_summary_image(self, total_countries: int, top_countries: List[Country], 
                             last_refreshed: datetime) -> str:
        """
        Generate a summary image with statistics
        Returns: Path to the generated image
        """
        # Image dimensions
        width, height = 800, 600
        background_color = (255, 255, 255)  # White
        text_color = (51, 51, 51)  # Dark gray
        header_color = (0, 123, 255)  # Blue
        
        # Create image
        image = Image.new('RGB', (width, height), background_color)
        draw = ImageDraw.Draw(image)
        
        # Try to use a better font, fall back to default if not available
        try:
            title_font = ImageFont.truetype("/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf", 32)
            header_font = ImageFont.truetype("/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf", 24)
            text_font = ImageFont.truetype("/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf", 18)
            small_font = ImageFont.truetype("/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf", 14)
        except:
            # Fall back to default font
            title_font = ImageFont.load_default()
            header_font = ImageFont.load_default()
            text_font = ImageFont.load_default()
            small_font = ImageFont.load_default()
        
        # Title
        title = "Country API Summary"
        title_bbox = draw.textbbox((0, 0), title, font=title_font)
        title_width = title_bbox[2] - title_bbox[0]
        draw.text(((width - title_width) // 2, 30), title, fill=header_color, font=title_font)
        
        # Total countries
        total_text = f"Total Countries: {total_countries}"
        draw.text((50, 100), total_text, fill=text_color, font=header_font)
        
        # Top 5 countries header
        top5_header = "Top 5 Countries by GDP:"
        draw.text((50, 150), top5_header, fill=header_color, font=header_font)
        
        # List top countries
        y_position = 190
        for i, country in enumerate(top_countries[:5], 1):
            gdp_text = f"${country.estimated_gdp:,.0f}" if country.estimated_gdp else "N/A"
            country_text = f"{i}. {country.name} - {gdp_text}"
            draw.text((70, y_position), country_text, fill=text_color, font=text_font)
            y_position += 30
        
        # Last refreshed
        if last_refreshed:
            refresh_text = f"Last Updated: {last_refreshed.strftime('%Y-%m-%d %H:%M:%S UTC')}"
        else:
            refresh_text = "Last Updated: Never"
        
        draw.text((50, height - 80), refresh_text, fill=text_color, font=small_font)
        
        # Footer
        footer_text = "Generated by Country Currency & Exchange API"
        footer_bbox = draw.textbbox((0, 0), footer_text, font=small_font)
        footer_width = footer_bbox[2] - footer_bbox[0]
        draw.text(((width - footer_width) // 2, height - 30), footer_text, fill=text_color, font=small_font)
        
        # Save image
        image.save(self.image_path, "PNG")
        return self.image_path
    
    def get_image_path(self) -> str:
        """Get the path to the summary image"""
        return self.image_path
    
    def image_exists(self) -> bool:
        """Check if the summary image exists"""
        return os.path.exists(self.image_path)